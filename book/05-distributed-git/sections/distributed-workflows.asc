=== Ibinahagi ang Mga Workflows


(((workflows)))
Hindi tulad ng Centralized Version Control Systems (CVCSs), ang ipinamamahagi na likas na katangian ng Git ay nagpapahintulot sa iyo na maging mas may kakayahang umangkop sa kung paano nakikipagtulungan ang mga developer sa mga proyekto. Sa mga sentralisadong sistema, ang bawat developer ay isang node na nagtatrabaho nang mas pantay-pantay sa gitnang hub. Sa Git, gayunpaman, ang bawat developer ay maaaring parehong isang node at isang hub - samakatuwid, ang bawat developer ay maaaring parehong magbigay ng code sa iba pang mga repositories at mapanatili ang isang pampublikong imbakan na kung saan ang iba ay maaaring ibatay ang kanilang trabaho at kung saan maaari silang mag-ambag sa. Binubuksan nito ang isang malawak na hanay ng mga posibilidad ng workflow para sa iyong proyekto at / o sa iyong koponan, kaya saklawin namin ang ilang mga karaniwang paraday na sinasamantala ang kakayahang umangkop na ito. Tatalakayin natin ang mga lakas at posibleng kahinaan ng bawat disenyo; maaari kang pumili ng isang solong gamitin, o maaari mong ihalo at tumugma sa mga tampok mula sa bawat isa.

==== Sentralisadong Workflow

(((workflows, centralized)))
Sa mga sentralisadong sistema, karaniwang may iisang modelo ng pakikipagtulungan - ang sentralisadong daloy ng trabaho. Ang isang sentral na sentro, o lalagyan, ay maaaring tumanggap ng code, at sinasadya ng lahat ang kanilang gawain dito. Ang isang bilang ng mga developer ay nodes - mga mamimili ng na hub - at i-synchronize sa isang lugar na iyon.

.Sentralisadong Workflow.
image::images/centralized_workflow.png[Centralized workflow.]

Nangangahulugan ito na kung ang dalawang developer ay mag-clone mula sa sentro at pareho gumawa ng mga pagbabago, ang unang developer na itulak ang kanilang mga pagbabago ay maaaring magawa ito nang walang mga problema. Ang ikalawang developer ay dapat sumali sa trabaho ng una bago itulak ang mga pagbabago, upang hindi mapapalit ang mga pagbabago sa unang developer. Ang konsepto na ito ay totoo sa Git na ito ay nasa Subversion (o anumang CVCS), at ang modelong ito ay gumagana nang mahusay sa Git.

Kung komportable ka sa isang sentralisadong daloy ng trabaho sa iyong kumpanya o pangkat, madali mong patuloy na gamitin ang workflow na ito sa Git. 
SI-set up lamang ang isang solong repository, at bigyan ang lahat ng tao sa iyong koponan na itulak ang pag-access; Hindi pahihintulutan ng Git na patungan ng mga user ang bawat isa. 
Sabihing pareho sina John at Jessica. 
Tinapos ni John ang kanyang pagbabago at itinutulak ito sa server. 
Pagkatapos ay sinubukan ni Jessica na itulak ang kanyang mga pagbabago, ngunit tinatanggihan sila ng server. 
Sinabihan siya na sinisikap niyang itulak ang mga di-mabilis na pagbabago at hindi na niya magawa ito hanggang sa makuha niya at merge.
Ang daloy ng trabaho na ito ay kaakit-akit sa maraming tao dahil ito ay isang tularan na maraming pamilyar at kumportable.

Hindi rin ito limitado sa maliliit na koponan. Sa modelo ng sumasanga ng Git, posible para sa daan-daang mga developer na matagumpay na magtrabaho sa isang solong proyekto sa pamamagitan ng dose-dosenang mga sanga nang sabay-sabay.

[[_integration_manager]]
==== Integration-Manager Workflow

(((workflows, integration manager)))
Dahil ang Git ay nagpapahintulot sa iyo na magkaroon ng maramihang mga remote na repository, posible na magkaroon ng isang workflow kung saan ang bawat developer ay may write access sa kanilang sariling pampublikong imbakan at basahin ang access sa lahat ng iba.
Madalas na kinabibilangan ng sitwasyong ito ang isang kanonikal na repository na kumakatawan sa proyektong ``official''.
Upang mag-ambag sa proyektong iyon, lumikha ka ng iyong sariling pampublikong clone ng proyekto at itulak ang iyong mga pagbabago dito. 
Pagkatapos, maaari kang magpadala ng isang kahilingan sa tagapanatili ng pangunahing proyekto upang makuha ang iyong mga pagbabago. 
Ang tagapangasiwa ay maaaring magdagdag ng iyong repository bilang isang remote, subukan ang iyong mga pagbabago sa isang lugar, pagsamahin ang mga ito sa kanilang sangay, at itulak pabalik sa kanilang imbakan.
Gumagana ang proseso tulad ng sumusunod  (see <<wfdiag_b>>):

1. Ang tagapagpatuloy ng proyekto ay nagtutulak sa kanilang pampublikong imbakan.
2. Ang isang taga-ambag ng mga taga-ambag na nagtatayo at gumagawa ng mga pagbabago.
3. Ang kontribyutor ay nagtutulak sa kanilang sariling pampublikong kopya.
4. Ang kontribyutor ay nagpapadala ng tagapanatili ng isang email na nagtatanong sa kanila na pull mga pagbabago.
5. Ang tagapangasiwa ay nagdaragdag sa lalagyan ng kontribyutor bilang isang remote at merge sa isang lugar.
6. Ang tagapangasiwa ay nagtutulak ng pinagsama-samang mga pagbabago sa pangunahing imbakan.
 

[[wfdiag_b]]
.Integration-manager workflow.
image::images/integration-manager.png[Integration-manager workflow.]

(((forking)))
Ito ay isang pangkaraniwang daloy ng trabaho na may mga kasangkapan na nakabatay sa hub tulad ng GitHub o GitLab, kung saan madaling magaan ang isang proyekto at itulak ang iyong mga pagbabago sa iyong tinidor para makita ng lahat. Ang isa sa mga pangunahing bentahe ng diskarteng ito ay maaari mong patuloy na magtrabaho, at ang tagapagbenta ng pangunahing repositoryo ay maaaring makahuli sa iyong mga pagbabago sa anumang oras. Ang mga kontribyutor ay hindi kailangang maghintay para sa proyekto na isama ang kanilang mga pagbabago - ang bawat partido ay maaaring gumana sa sarili nilang bilis.

==== Dictator at Lieutenants Workflow

(((workflows, dictator and lieutenants)))
Ito ay isang variant ng isang daloy ng workflow ng maraming-repository. Karaniwang ginagamit ito ng mga malalaking proyekto na may daan-daang mga tumutulong; isang tanyag na halimbawa ang kernel ng Linux. Ang iba't ibang mga tagapamahala ng pagsasanib ay nasa singil ng ilang bahagi ng imbakan; tinawag silang mga lieutenant. Ang lahat ng mga lieutenant ay may isang tagapamahala ng pagsasama na kilala bilang mabait na diktador. Ang mabait na diktador ay nagtutulak mula sa kanyang direktoryo papunta sa repository na repository kung saan kailangan ng lahat ng mga tumutulong. Ang proseso ay gumagana tulad nito (see <<wfdiag_c>>):

1. Gumagana ang mga regular na tagabuo sa kanilang branch ng paksa at i-rebase ang kanilang trabaho sa tuktok ng `master`. Ang `master` branch ay ang direktoryo ng reference na kung saan ang diktador ay itulak.
2. Ang mga Lieutenant ay nagsasama ng mga sangay ng paksa ng developer sa kanilang `master` branch.
3. Pinagsama ng diktador ang mga sangay ng `master` ng mga lieutenant sa `master` branch ng diktador.
4. Sa wakas, itinutulak ng diktador  ang `master` ng sangay sa repository ng sanggunian upang ang iba pang mga developer ay makapagpasiya dito.

[[wfdiag_c]]
.Benevolent dictator workflow.
image::images/benevolent-dictator.png[Benevolent dictator workflow.]

Ang ganitong uri ng workflow ay hindi pangkaraniwan, ngunit maaaring maging kapaki-pakinabang sa napakalaking proyekto, o sa mataas na hierarchical na kapaligiran. Pinapayagan nito ang pinuno ng proyekto (diktador) na ipagkaloob ang marami sa trabaho at mangolekta ng mga malalaking subset ng code sa maraming punto bago isama ang mga ito.

==== Buod ng Trabaho

Ang mga ito ay ilang karaniwang ginagamit na daloy ng trabaho na posible sa isang ipinamamahagi na sistema tulad ng Git, ngunit maaari mong makita na maraming mga pagkakaiba-iba ay posible upang umangkop sa iyong partikular na daloy ng trabaho sa real-mundo. Ngayon na maaari mong (sana) matukoy kung aling workflow kumbinasyon ay maaaring gumana para sa iyo, masasakop namin ang ilang mga mas tiyak na mga halimbawa kung paano ganapin ang mga pangunahing tungkulin na bumubuo sa iba't ibang mga daloy. Sa susunod na seksyon, matututunan mo ang tungkol sa ilang karaniwang mga pattern para sa pagbibigay ng kontribusyon sa isang proyekto.
