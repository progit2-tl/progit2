[[_an_example_git_enforced_policy]]
=== An Example Git-Enforced Policy

(((policy example)))
Sa bahaging ito, gagamitin mo ang iyong natutunan upang magtatag ng isang Git workflow na nagsusuri para sa isang custom commit message format, at nagbibigay-daan lamang sa ilang mga gumagamit na baguhin ang ilang subdirectories sa isang proyekto
gagawa ka ng client scripts na makatutulong sa developerna malaman kung ang push nila ay hindi ipapatupad at ang server scripts na talagang ipatupad ang mga patakaran.

Ang mga scripts na aming ipapakita ay nakasulat sa Ruby; bahagya lamang dahil dahil sa ating itelektwal na pagkawalang kilos, kundi dahil din ang Ruby ay madaling basahin, kahit na hindi mo na kailangang isulat ito.
gayunpaman, kahit anumang wika ay gagana – lahat ng mga halimbawang hook scripts na nakabahagi sa Git ay kahit na ano sa Perl or Bash, ng sa ganun ay marami kang makikitang halimbawa ng hooks sa mga wikang iyon sa pamamaraan ng pagtingin sa mga halimbawa

==== Server-Side Hook

Lahat ng mga server-side workay mapupunta sa `update` file ng iyong `hooks` directory.
Ang `update` hook ay tumatakbo sa kada branch na itinutulak at tutamatagal sa tatlong argumento:

* Ang pangalan ng sanggunian na itutulak
* Ang lumang rebisyon na kung saan ang mga branch ay nakalagay
* ang bagong rebisyon na itinulak

Ikaw din ay may control sa mga taong gumagawa ng pagtutulak pag ang pagtutulak ay pinatatakbo sa SSH.
Kung pinayagan mo ang lahat na makakonekt sa isang tao lamang (like ``git'') sa paraan ng public-key authentication, maaring ikaw din  ay magbigay sa isang user  ng shell wrapper na siyang nagpapasya kung kaninong user ang kumokonekta na nakabase sa public key, at nagset ng environment variable ayon sa naaayon.
Dito natin ipapalagay na ang kumukonekt na user ay nasa `$USER` environment variable, para ang iyong update script ay magsisimula sa paraan ng paglakap ng lahat ng mga impormasyon na iyong kinakailangan:

[source,ruby]
----
#!/usr/bin/env ruby

$refname = ARGV[0]
$oldrev  = ARGV[1]
$newrev  = ARGV[2]
$user    = ENV['USER']

naglagay ng "Enforcing Policies..."
naglagay ng "(#{$refname}) (#{$oldrev[0,6]}) (#{$newrev[0,6]})"
----

oo, lahat ng iyon ay global variables.
Huwag mong husgahan – ito ay mas madaling ipakita sa ganitong pamamaraan

[[_enforcing_commit_message_format]]
===== Pagpapatupad ng Specific Commit-Message Format

Ang iyong unang hamon ay ang pagpapatupad na dapat ang bawat isang commit message ay nakaayon sa isang partikular na format.
Para magkaroon ng isang panuntunan, ipagpalagay mo na dapat bawat mensahe ay magdadagdag ng string na kapareha ng ``ref: 1234'' dahil gusto mo na ang bawat commit ay nakalink sa aytem ng iyong sistemang pagtiticket.
dapat mong makita ang bawat isang commit ay naitutulak pataas, tingnan mo kung ang string ay nasa commit message, at, kung ang string ay wala sa anumang commits, lumabas sa non-zero ng sa ganun ang pagtulak ay tinanggihan.

Maaari kang makakuha ng listahan ng mga SHA-1 values ng lahat ng mga commits that na itinutulak sa paraan ng pagkuha na `$newrev` at `$oldrev` values at ipasa lang ng iyon sa Git plumbing command na kung tawagin ay `git rev-list`.
Ito lamang ay isang simpleng `git log` command, ngunit sa default ito ay nag-iimprenta lamang ng SHA-1 values at wala ng ibang impormasyon.
Kaya, para makuha ang lahat ng listahan ng commit, SHA-1s ay ipinapapakilala sa pagitan ng commit SHA-1 at isa pa, makakapagpatakbko ka ng kapareho nito:

[source,console]
----
$ git rev-list 538c33..d14fc7
d14fc7c847ab946ec39590d87783c69b031bdfb7
9f585da4401b0a3999e84113824d15245c13f0be
234071a1be950e2a8d078e6141f5cd20c1e61ad3
dfa04c9ef3d5197182f13fb5b9b1fb7717d2222a
17716ec0f1ff5c77eff40b7fe912f9f6cfd0e475
----

Maaari mong kunin ang output,at i-loop sa bawat isa ng commit SHA-1s, kunin ang message para sa mga ito, at itest ang message laban sa regular expression na naghahanap ng pattern.

kelangan mong malaman kung papaano makakakuha ng commit message sa bawat isa ng commits para masuri.
Para makuha ang raw commit data, pwede ka gumamit ng isa pang plumbing command called `git cat-file`.
Ating balikan ang plumbing commands sa detalyadong pamamaraan sa paraang ng <<_git_internals#_git_internals>>; pero sa ngayong, heto ang ibibigay ng command:

[source,console]
----
$ git cat-file commit ca82a6
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
author Scott Chacon <schacon@gmail.com> 1205815931 -0700
committer Scott Chacon <schacon@gmail.com> 1240030591 -0700

palitan ang bersyon na numero
----

isang simpleng pamamaraan para makuha ang commit message sa isang commit ay kapag ikaw ay may  SHA-1 value ay sa pagpunta sa  unang blanko na lina at kunin ang lahat pagkatapos unun.
magagawa mo din sa pamamaraan ng `sed` command sa sistema ng UNIX:

[source,console]
----
$ git cat-file commit ca82a6 | sed '1,/^$/d'
pinalitan ang bersyon na nuymero
----

Maari mong gamitin ang parang mahika na iyon para makuha ang commit message sa bawath commit na nagsusumukap na patulak at lalabas kung may nakikita kang di kaaya-aya na hindi magkapareha.
Para lumabas sa script and at tanggihan ang pagtulak, lumabas sa non-zero.
The whole method looks like this:

[source,ruby]
----
$regex = /\[ref: (\d+)\]/

# pagpapatupad ng custom commit message format
def check_message_format
  missed_revs = `git rev-list #{$oldrev}..#{$newrev}`.split("\n")
  missed_revs.each do |rev|
    message = `git cat-file commit #{rev} | sed '1,/^$/d'`
    if !$regex.match(message)
      puts "[POLICY] Ang iyong mensahe ay hindi naformat ng maayos"
      exit 1
    end
  end
end
check_message_format
----

Sa paglalagay nito sa iyong `update` script ay tatanggihan nito ang mga pagbabago na nagtataglay ng commits na may mensahe na hindi naaayon sa iyong palatuntunin.

===== Pagtatalaga ng User-Based ACL System

Ipagpalagay natin na gusto mong lagyan ng isang mekanismo na gagamit access control list (ACL) na tumutukoy kung kaninong tagagamit  may pahintulot na gagawin ang pagtulak na pagbabago sa kahit na anong parte ng iyong proyekto.
Ang ibang tao ay may pangkalahatang pahintulot, at ang iba naman ay kaya lang itulak ang mga pagbabago sa piling subdirectories o natatanging mga payls.
Para maitalaga ito, ikaw ang magsusulat ng mga palatuntunin sa isang payl sa pangalang `acl` na nabubuhay sa iyong hubad na Git repository sa serber na iyon.
Magkakaroon ka ng `update` hook na makikita sa iyong mga palatuntunin, makikita kung anong payls na ipinakilala sa lahat ng commits na itinutulak, at matukoy kung ang gumagamit ba na gumagawa ng pagtutulak  ay may pahintulot na baguhin ang mga payls.

Ang una mong gagawin ay isulat ang iyong ACL.
Dito,ikaw ay gagamit ng isanng format na sobrang magkatulad sa CVS ACL na mekanismo: ito ay gumagamit ng isang serye ng linya, na kung saan ang unang larangan ay `avail` o `unavail`, ang susunod na larangan ay lisatahan ng comma-delimited ng mga tagagamit ng kung saan ang mga patakaran ay nalalapat, at ang huling larangan ay ang landas na kung saan ang patakaran ay nalalapat din (blanko ay ibig sabilin ay bukas na askses).
lahat ng patlang na ito ay delimited ng pipe (`|`) na karakter.

Sa kasong ito, may isang pares ka ng administrators, ang ilang manunulat sa dokyumentasyon wna may pahintulot sa `doc` directory, at isang tagadevelop na may pahintulot lamang sa `lib` at `tests` directories, at ang iyong ACL file ay makikitang parang ganito:

[source]
----
avail|nickh,pjhyett,defunkt,tpw
avail|usinclair,cdickens,ebronte|doc
avail|schacon|lib
avail|schacon|tests
----

Ikaw ay magsisimula sa pagbasa ng mga data sa isang istraktura na iyong magagamit.
Sa kasong ito, upang maging simple ang mga halimbawa, ikaw lamang ay magtatalaga `avail` directives.
Ito ang isang paraan na magbibigay sa inyo ng nag-uugnay na hanay na kung saan ang susi ay ang pangalan ng tagagamit at ang  value ay hanay ng mgaa landas na kung saan ang tagagamit ang may pahintulot na sumulat:

[source,ruby]
----
def get_acl_access_data(acl_file)
  # read in ACL data
  acl_file = File.read(acl_file).split("\n").reject { |line| line == '' }
  access = {}
  acl_file.each do |line|
    avail, users, path = line.split('|')
    next unless avail == 'avail'
    users.split(',').each do |user|
      access[user] ||= []
      access[user] << path
    end
  end
  access
end
----

sa mga payl ng na nakita mo sa simula, itong `get_acl_access_data` na paggamit ay ibinibalik ang isang istrakturang data na kahawig nito:

[source,ruby]
----
{"defunkt"=>[nil],
 "tpw"=>[nil],
 "nickh"=>[nil],
 "pjhyett"=>[nil],
 "schacon"=>["lib", "tests"],
 "cdickens"=>["doc"],
 "usinclair"=>["doc"],
 "ebronte"=>["doc"]}
----

Ngayon na ang lahat ng pahintulon ay nakaayon na sa pagkakasunod-sunod, kelangan mong malanman kung saang landas ang commits ay itinutloak ang nabago, ng sa ganon may masigurado mo na ang tagagamit na tumutulak ay may pahintulot sa lahat na iyon.

Medyo madali mong makikita kung anong payl ang nabago sa isang pagcommit sa paraan ng `--name-only` na opsyon sa `git log` command (na nabanggit kanina sa <<_git_basics_chapter#_git_basics_chapter>>):

[source,console]
----
$ git log -1 --name-only --pretty=format:'' 9f585d

README
lib/test.rb
----

kung ginamit mo ang istrakturang ACL na galing sa `get_acl_access_data` na pamamaraan binusisa laban sa mga nakalistang mga payl sa bawat isa ng pagcommit, maaari mong malaman kung ang tagagamit ba ay may pahintulotna itulak lahat ng kanilang pagcommit:

[source,ruby]
----
# pinahihintulutan lamang ang piling tagagamit na baguhin ang piling sa isang proyekto
def check_directory_perms
  access = get_acl_access_data('acl')

  # tingnan kung sino man  ay nagtatangkangmagtulak ng kahit na anuman na di nila kaya
  new_commits = `git rev-list #{$oldrev}..#{$newrev}`.split("\n")
  new_commits.each do |rev|
    files_modified = `git log -1 --name-only --pretty=format:'' #{rev}`.split("\n")
    files_modified.each do |path|
      next if path.size == 0
      has_file_access = false
      access[$user].each do |access_path|
        if !access_path  # user has access to everything
           || (path.start_with? access_path) # access to this path
          has_file_access = true
        end
      end
      if !has_file_access
        puts "[POLICY] You do not have access to push to #{path}"
        exit 1
      end
    end
  end
end

check_directory_perms
----

Makakakuha ka ng listahan ng mga bagong pagkumit na itinutulak sa iyong serber gamit ang `git rev-list`.
Pagkatapos, sa bawat pagcommit, makikita mo kung anong payl ang nabago at masisigurado mo na ang  tagagamit ng tumutulak ay may pahintulot sa landas na binabago.

Ngayon ang iyong mga tagagamit ay hindi makakatulak ng pagcommit ng di wastong pagporma na mga mensahe or may binagong payls na labas sa kanilang nakatakdang landas.

=====Sinusubukan

kung patatakbuhin mo ang `chmod u+x .git/hooks/update`, na kung saan ay ang mga payl na kung saan dapat ilagay ang lahat ng mga code na ito, at pakatapos ay subukang itulang ang pagcommit ang mensahe sa paraang di sinusunod, makakakuha ka ng ganito:

[source,console]
----
$ git push -f origin master
Pagbibilang ng mga bagays: 5, done.
pagkokompres ng mga bagay: 100% (3/3), done.
Pagsusulat ng mga bagay: 100% (3/3), 323 bytes, done.
kabuuan 3 (delta 1), reused 0 (delta 0)
Pag-uunpack ng mga bagay: 100% (3/3), done.
Pagpapatupad ng mga patakaran...
(refs/heads/master) (8338c5) (c5b616)
[POLICY] Hindi naformat ng tama ang iyong mensahe
may error: hooks/update exited with error code 1
may error: hook declined to update refs/heads/master
To git@gitserver:project.git
 ! [remote rejected] master -> master (hook declined)
may error: failed to push some refs to 'git@gitserver:project.git'
----

mayroong mga pares ng mga kawili-wiling bagay dito.
Una, makikita mo kung saan ang  hook ay nagsisimulang tumakbo.

[source,console]
----
Enforcing Policies...
(refs/heads/master) (fb8c72) (c56860)
----

Remember that you printed that out at the very beginning of your update script.
Anything your script echoes to `stdout` will be transferred to the client.

The next thing you'll notice is the error message.

[source,console]
----
[POLICY] Your message is not formatted correctly
error: hooks/update exited with error code 1
error: hook declined to update refs/heads/master
----

The first line was printed out by you, the other two were Git telling you that the update script exited non-zero and that is what is declining your push.
Lastly, you have this:

[source,console]
----
To git@gitserver:project.git
 ! [remote rejected] master -> master (hook declined)
error: failed to push some refs to 'git@gitserver:project.git'
----

You'll see a remote rejected message for each reference that your hook declined, and it tells you that it was declined specifically because of a hook failure.

Furthermore, if someone tries to edit a file they don't have access to and push a commit containing it, they will see something similar.
For instance, if a documentation author tries to push a commit modifying something in the `lib` directory, they see

[source,console]
----
[POLICY] You do not have access to push to lib/test.rb
----

From now on, as long as that `update` script is there and executable, your repository will never have a commit message without your pattern in it, and your users will be sandboxed.

==== Client-Side Hooks

The downside to this approach is the whining that will inevitably result when your users' commit pushes are rejected.
Having their carefully crafted work rejected at the last minute can be extremely frustrating and confusing; and furthermore, they will have to edit their history to correct it, which isn't always for the faint of heart.

The answer to this dilemma is to provide some client-side hooks that users can run to notify them when they're doing something that the server is likely to reject.
That way, they can correct any problems before committing and before those issues become more difficult to fix.
Because hooks aren't transferred with a clone of a project, you must distribute these scripts some other way and then have your users copy them to their `.git/hooks` directory and make them executable.
You can distribute these hooks within the project or in a separate project, but Git won't set them up automatically.

To begin, you should check your commit message just before each commit is recorded, so you know the server won't reject your changes due to badly formatted commit messages.
To do this, you can add the `commit-msg` hook.
If you have it read the message from the file passed as the first argument and compare that to the pattern, you can force Git to abort the commit if there is no match:

[source,ruby]
----
#!/usr/bin/env ruby
message_file = ARGV[0]
message = File.read(message_file)

$regex = /\[ref: (\d+)\]/

if !$regex.match(message)
  puts "[POLICY] Your message is not formatted correctly"
  exit 1
end
----

If that script is in place (in `.git/hooks/commit-msg`) and executable, and you commit with a message that isn't properly formatted, you see this:

[source,console]
----
$ git commit -am 'test'
[POLICY] Your message is not formatted correctly
----

No commit was completed in that instance.
However, if your message contains the proper pattern, Git allows you to commit:

[source,console]
----
$ git commit -am 'test [ref: 132]'
[master e05c914] test [ref: 132]
 1 file changed, 1 insertions(+), 0 deletions(-)
----

Next, you want to make sure you aren't modifying files that are outside your ACL scope.
If your project's `.git` directory contains a copy of the ACL file you used previously, then the following `pre-commit` script will enforce those constraints for you:

[source,ruby]
----
#!/usr/bin/env ruby

$user    = ENV['USER']

# [ insert acl_access_data method from above ]

# only allows certain users to modify certain subdirectories in a project
def check_directory_perms
  access = get_acl_access_data('.git/acl')

  files_modified = `git diff-index --cached --name-only HEAD`.split("\n")
  files_modified.each do |path|
    next if path.size == 0
    has_file_access = false
    access[$user].each do |access_path|
    if !access_path || (path.index(access_path) == 0)
      has_file_access = true
    end
    if !has_file_access
      puts "[POLICY] You do not have access to push to #{path}"
      exit 1
    end
  end
end

check_directory_perms
----

This is roughly the same script as the server-side part, but with two important differences.
First, the ACL file is in a different place, because this script runs from your working directory, not from your `.git` directory.
You have to change the path to the ACL file from this

[source,ruby]
----
access = get_acl_access_data('acl')
----

to this:

[source,ruby]
----
access = get_acl_access_data('.git/acl')
----

The other important difference is the way you get a listing of the files that have been changed.
Because the server-side method looks at the log of commits, and, at this point, the commit hasn't been recorded yet, you must get your file listing from the staging area instead.
Instead of

[source,ruby]
----
files_modified = `git log -1 --name-only --pretty=format:'' #{ref}`
----

you have to use

[source,ruby]
----
files_modified = `git diff-index --cached --name-only HEAD`
----

But those are the only two differences – otherwise, the script works the same way.
One caveat is that it expects you to be running locally as the same user you push as to the remote machine.
If that is different, you must set the `$user` variable manually.

One other thing we can do here is make sure the user doesn't push non-fast-forwarded references.
To get a reference that isn't a fast-forward, you either have to rebase past a commit you've already pushed up or try pushing a different local branch up to the same remote branch.

Presumably, the server is already configured with `receive.denyDeletes` and `receive.denyNonFastForwards` to enforce this policy, so the only accidental thing you can try to catch is rebasing commits that have already been pushed.

Here is an example pre-rebase script that checks for that.
It gets a list of all the commits you're about to rewrite and checks whether they exist in any of your remote references.
If it sees one that is reachable from one of your remote references, it aborts the rebase.

[source,ruby]
----
#!/usr/bin/env ruby

base_branch = ARGV[0]
if ARGV[1]
  topic_branch = ARGV[1]
else
  topic_branch = "HEAD"
end

target_shas = `git rev-list #{base_branch}..#{topic_branch}`.split("\n")
remote_refs = `git branch -r`.split("\n").map { |r| r.strip }

target_shas.each do |sha|
  remote_refs.each do |remote_ref|
    shas_pushed = `git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}`
    if shas_pushed.split("\n").include?(sha)
      puts "[POLICY] Commit #{sha} has already been pushed to #{remote_ref}"
      exit 1
    end
  end
end
----

This script uses a syntax that wasn't covered in <<_git_tools#_revision_selection>>.
You get a list of commits that have already been pushed up by running this:

[source,ruby]
----
`git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}`
----

The `SHA^@` syntax resolves to all the parents of that commit.
You're looking for any commit that is reachable from the last commit on the remote and that isn't reachable from any parent of any of the SHA-1s you're trying to push up – meaning it's a fast-forward.

The main drawback to this approach is that it can be very slow and is often unnecessary – if you don't try to force the push with `-f`, the server will warn you and not accept the push.
However, it's an interesting exercise and can in theory help you avoid a rebase that you might later have to go back and fix.
