[[_git_submodules]]
=== Mga Submodule

Madalas na nangyayari na habang nagtatrabaho sa isang proyekto, kailangan mong gumamit ng isa pang proyekto mula sa loob nito.
Marahil ito ay isang library na binuo ng isang third party o ikaw ay hiwalay lumilikha at ginagamit sa maraming mga proyektong magulang.
Ang isang karaniwang isyu ay lumitaw sa mga sitwasyong ito: gusto mong tratuhin ang dalawang proyekto na hiwalay ngunit maaari pa ring magamit ang isa mula sa loob ng isa pa.

Narito ang isang halimbawa.
Ipagpalagay na ikaw ay bumubuo ng isang website at naglilikha ng Atom feed.
Sa halip na nagsusulat ng iyong sariling code na binubuo ng Atom, napagdesisyunan mo na gumamit ng isang library.
Malamang na kailangang isama mo ang code na ito mula sa isang nakabahaging library tulad ng pag-install ng CPAN o Ruby gem, o kopyahin ang source code sa iyong sariling tree ng proyekto.
Ang isyu sa pagsasali sa library ay mahirap na ipasadya ang library sa anumang paraan at kadalasang mas mahirap na i-deploy ito, dahil kailangan mong siguraduhin na ang bawat kliyente ay may magagamit na library.
Ang isyu sa pagkokopya ng code sa iyong sariling proyekto ay mahirap na isama ang anumang mga pasadyang pagbabago na iyong ginawa kapag ang mga upstream na pagbabago ay nagiging nagagamit.

Tinatalakay ng Git ang mga isyung ito gamit ang mga submodule.
Ang mga submodule ay nagpapahintulot sa iyo na panatilihin ang isang repositoryo ng Git bilang isang subdirectory ng ibang repositoryo ng Git.
Pinapayagan na nito na i-clone ang iba pang repositoryo sa iyong proyekto at panatilihing hiwalay ang iyong mga commit.

[[_starting_submodules]]
==== Pagsisimula sa mga Submodule

Ating tatalakayin ang paggawa ng isang simpleng proyekto na hinati sa isang pangunahing proyekto at ilang mga sub-project.

Ating simulan sa pamamagitan ng pagdagdag ng isang umiiral na repositoryo ng Git bilang isang submodule na repositoryo na ating tinatrabaho.
Upang magdagdag ng isang bagong submodule, gumamit ng utos na `git submodule add` na may ganap o kaugnay na URL ng pryekto na nais mong simulang subaybayan.
Sa halimbawang ito, magdadagdag tayo ng isang library na tinatawag na ``DbConnector''.

[source,console
----
$ git submodule add https://github.com/chaconinc/DbConnector
Pagkokopya sa 'DbConnector'...
remote: Pagbibilang ng mga bagay: 11, tapos na.
remote: Pagko-compress ng mga bagay: 100% (10/10), tapos na.
remote: Kabuuan 11 (delta 0), muling nagamit 11 (delta 0)
Pag-aalis ng laman ng mga bagay: 100% (11/11), tapos na.
Pagsusuri ng pagkakakonekta... tapos na.
----

Bilang default, idadagdag ng mga submodule ang subprject sa isang direktoryo na pinangalanan nang pareho sa repositoryo, sa kasong ito ay ``DbConnector''.
Maaari kang magdagdag ng iba't-ibang path sa huli ng utos kung nais mo ito pumunta saanman.

Kung patakbuhin mo ang `git status` sa puntong ito, mapapansin mo ang ilang mga bagay.

[source,console]
----
$ git status
Sa branch na master
Ang iyong branch ay napapanahon sa 'origin/master'.

Ang mga pagbabagong dapat i-commit:
  (gumamit ng "git reset HEAD <file>..." upang mag-unstage)

	bagong file:   .gitmodules
	bagong file:   DbConnector
----

Una dapat mong mapansin ang bagong file na `.gitmodules`.
Ito ay isang file ng pagsasaayos na nag-iimbak sa pagmamapa sa pagitan ng URL ng proyekto at ang lokal na subdirectory na na-pull mo ito:

[source,ini]
----
[submodule "DbConnector"]
	path = DbConnector
	url = https://github.com/chaconinc/DbConnector
----

Kung mayroon kang maramihang mga submodule, magkakaroon ka ng maramihang mga entry sa file na ito.
Mahalaga na tandaan na ang file na ito ay kontrolado ng bersyon kasama ang iyong ibang mga file, katulad ng iyong file na `.gitignore`.
Ito ay naka-push at naka-pull sa natitirang bahagi ng iyong proyekto.
Ito ay kung paano alam ng ibang mga tao na nag-clone ng proyektong ito kung saan makukuha ang mga proyekto ng submodule.

[TANDAAN]
=====
Dahil ang URL sa file na .gitmodules ay kung ano ang unang subukan ng mga tao upang i-clone/i-fetch, siguraduhin na gumamit ng isang URL na maaari nilang ma-access kung posible.
Halimbawa, kung gumamit ka ng isang iba't ibang URL upang mag-push kaysa sa iba na gusto na mag-pull, gumamit ng isa na may access ang iba.
Maaari mong sapawan ang halaga na ito nang lokal gamit ang `git config submodule.DbConnector.url PRIVATE_URL` para sa pansariling paggamit.
Kung naaangkop, maaaring makatulong ang isang kaugnay na URL.
=====

Ang ibang paglilista sa `git status` na output ay ang entry ng folder ng proyekto.
Kung papatakbuhin mo ang `git diff` doon, nakikita mo ang isang kawili-wiling bagay:

[source,console]
----
$ git diff --cached DbConnector
diff --git a/DbConnector b/DbConnector
bagong mode ng file na 160000
indeks 0000000..c3f01dc
--- /dev/null
+++ b/DbConnector
@@ -0,0 +1 @@
+Subproject commit c3f01dc8862123d317dd46284b05b6892c7b29bc
----

Kahit na ang `DbConnector` ay isang subdirectory ng iyong tinatrabahuang direktoryo, nakikita ito ng Git bilang isang submodule at hindi nagsusubaybay sa mga nilalaman nito kapag wala ka sa direktoryo iyon.
Sa halip, nakikita ito ng Git bilang isang partikular na commit mula sa repositoryong iyon.

Kung nais mo ng isang mas magandang diff na output, maaaring kang magpasa ng opsyon na `--submodule` sa `git diff`.

[source,console]
----
$ git diff --cached --submodule
diff --git a/.gitmodules b/.gitmodules
bagong mode ng file na 100644
indeks 0000000..71fc376
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "DbConnector"]
+       path = DbConnector
+       url = https://github.com/chaconinc/DbConnector
Submodule DbConnector 0000000...c3f01dc (bagong submodule)
----

Kapag ikaw ay nag-commit, nakikita mo ang isang bagay tulad nito:

[source,console]
----
$ git commit -am 'added DbConnector module'
[master fb9093c] nagdagdag ng DbConnector na module
 2 mga file ang nabago, 4 pagsisingit(+)
 lumikha ng mode na 100644 .gitmodules
 lumikha ng mode na 160000 DbConnector
----

Pansinin ang mode na `160000` para sa entry ng `DbConnector`.
Iyon ay isang espesyal na mode sa Git na nangangahulugan na ikaw ay nagtatala ng isang commit bilang isang entry ng direktoryo sa halip na isang subdirectory o isang file.

Panghuli, i-push ang mga pagbabagong ito:

[source,console]
----
$ git push origin master
----

[[_cloning_submodules]]
==== Pagkokopya ng isang Proyekto na may mga Submodule

Dito, ating ikokopya ang isang proyekto na may isang submodule sa loob nito.
Kapag ikaw ay nagkokopya tulad ng proyektong ito, bilang default, nakakakuha ka ng mga direktoryo na naglalaman ng mga submodule, ngunit wala pa sa mga file na ito ang nasa loob nito:

[source,console]
----
$ git clone https://github.com/chaconinc/MainProject
Pagkokopya sa 'MainProject'...
remote: Pagbibilang ng mga bagay: 14, tapos na.
remote: Pagko-compress ng mga bagay: 100% (13/13), tapos na.
remote: Kabuuan 14 (delta 1), muling nagamit 13 (delta 0)
Pag-aalis ng laman ng mga bagay: 100% (14/14), tapos na.
Pagsusuri ng pagkakakonekta... tapos na.
$ cd MainProject
$ ls -la
kabuuan 16
drwxr-xr-x   9 schacon  staff  306 Sep 17 15:21 .
drwxr-xr-x   7 schacon  staff  238 Sep 17 15:21 ..
drwxr-xr-x  13 schacon  staff  442 Sep 17 15:21 .git
-rw-r--r--   1 schacon  staff   92 Sep 17 15:21 .gitmodules
drwxr-xr-x   2 schacon  staff   68 Sep 17 15:21 DbConnector
-rw-r--r--   1 schacon  staff  756 Sep 17 15:21 Makefile
drwxr-xr-x   3 schacon  staff  102 Sep 17 15:21 includes
drwxr-xr-x   4 schacon  staff  136 Sep 17 15:21 scripts
drwxr-xr-x   4 schacon  staff  136 Sep 17 15:21 src
$ cd DbConnector/
$ ls
$
----

Nandoon ang direktoryo ng `DbConnector`, ngunit walang laman.
Kinakailangan mong patakbuhin ang dalawang utos: `git submodule init` upang masimulan ang iyong lokal na file ng pagsasaayos, at `git submodule update` upang kunin ang lahat ng datos mula sa proyektong iyon at suriin ang angkop na commit na nakalista sa iyong superproject:

[source,console]
----
$ git submodule init
Submodule 'DbConnector' (https://github.com/chaconinc/DbConnector) nakarehistro para sa path na 'DbConnector'
$ git submodule update
Pagkokopya sa 'DbConnector'...
remote: Pagbibilang ng mga bagay: 11, tapos na.
remote: Pagko-compress ng mga bagay: 100% (10/10), tapos na.
remote: Kabuuan 11 (delta 0), muling nagamit 11 (delta 0)
Pag-aalis ng laman ng mga bagay: 100% (11/11), tapos na.
Pagsusuri ng pagkakakonekta... tapos na.
Submodule path 'DbConnector': sinuri ang 'c3f01dc8862123d317dd46284b05b6892c7b29bc'
----

Ngayon na ang iyong subdirectory na `DbConnector` ay nasa eksaktong estado kung nasaan ito kumakailan noong na-commit mo kanina.

May ibang paraan upang gawin ito kung saan ay mas simple, gayunman.
Kung ipapasa mo ang `--recurse-submodules` sa uto na `git clone`, ito ay awtomating magsisimula at mag-update ng bawat submodule sa repositoryo.

[source,console]
----
$ git clone --recurse-submodules https://github.com/chaconinc/MainProject
Pagkokopya sa 'MainProject'...
remote: Pagbibilang ng mga bagay: 14, tapos na.
remote: Pagko-compress ng mga bagay: 100% (13/13), tapos na.
remote: Kabuuan 14 (delta 1), muling nagamit 13 (delta 0)
Pag-aalis ng laman ng mga bagay: 100% (14/14), tapos na.
Pagsusuri ng pagkakakonekta... tapos na.
Submodule 'DbConnector' (https://github.com/chaconinc/DbConnector) nakarehistro sa path na 'DbConnector'
Pagkokopya sa 'DbConnector'...
remote: Pagbibilang ng mga bagay: 11, tapos na.
remote: Pagko-compress ng mga bagay: 100% (10/10), tapos na.
remote: Kabuuan 11 (delta 0), muling nagamit 11 (delta 0)
Pag-aalis ng laman ng mga bagay: 100% (11/11), tapos na.
Pagsusuri ng pagkakakonekta... tapos na.
Submodule path 'DbConnector': sinuri ang 'c3f01dc8862123d317dd46284b05b6892c7b29bc'
----

==== Pagtatrabaho sa isang Proyekto na may mga Submodule

Ngayon na mayroon tayong isang kopya ng isang proyekto na may mga submodule sa loob nito at makikupagtulungan sa ating mga kasamahan sa koponan sa kapwa pangunahing proyekto at submodule na proyekto.

===== Pag-pull sa mga Pagbabago ng Upstream

Ang pinakasimpleng modelo ng paggamit ng mga submodule sa isang proyekto ay kung ikaw ay nag-uubos lamang ng isang subproject at nais na makakuha ng mga pagbabago mula dito sa pana-panahon ngunit hindi akwtal na nagbabago ng anuman sa iyong pagsusuri.
Talakayin natin ang isang simpleng halimbawa doon.

Kung gusto mong magsuri para sa bagong trabaho sa isang submodule, maaari kang pumunta sa direktoryo at patakbuhin ang `git fetch` at `git merge` ang upstream na branch upang ma-update ang lokal na code.

[source,console]
----
$ git fetch
Mula sa https://github.com/chaconinc/DbConnector
   c3f01dc..d0354fc  master     -> origin/master
$ git merge origin/master
Ina-update ang c3f01dc..d0354fc
Fast-forward
 scripts/connect.sh | 1 +
 src/db.c           | 1 +
 2 na mga file na nabago, 2 pagsisingit(+)
----

Kung gusto mo ngayong bumalik sa pangunahing proyekto at patakbuhin ang `git diff --submodule`, maaari mong makita na ang submodule ay na-update at makakuha ng isang listahan ng mga commit na naidagdag dito.
Kung hindi mo gusto na magtipa ng `--submodule` sa bawat oras na patakbuhin mo ang `git diff`, maaari mong itakda ito bilang default na format sa pamamagitan ng pagtatakda sa config na halaga ng `diff.submodule` sa ``log''.

[source,console]
----
$ git config --global diff.submodule log
$ git diff
Submodule DbConnector c3f01dc..d0354fc:
  > mas mahusay na kalakaran ng db
  > mas mahusay na kalakaran ng koneksyon
----

Kung nag-commit ka sa puntong ito pagkatapos ay ila-lock mo ang submodule sa pagkakaroon ng bagong code kapag nag-update ang iba pang mga tao.

Mayroong din isang mas madaling paraan upang gawin ito, kung naisin mo na hindi manu-manong kunin at i-merge sa subdirectory.
Kung patakbuhin mo ang `git submodule update --remote`, pupuntahan ng Git ang iyong mga submodule at kunin at i-update para sa iyo.

[source,console]
----
$ git submodule update --remote DbConnector
remote: Pagbibilang ng mga bagay: 4, tapos na.
remote: Pagko-compress ng mga bagay: 100% (2/2), tapos na.
remote: Kabuuan 4 (delta 2), muling nagamit 4 (delta 2)
Pag-aalis ng laman ng mga bagay: 100% (4/4), tapos na.
Mula sa https://github.com/chaconinc/DbConnector
   3f19983..d0354fc  master     -> origin/master
Submodule path 'DbConnector': sinuri ang 'd0354fc054692d3906c85c3af05ddce39a1c0644'
----

Ang utos na ito ay ipagpalagay bilang defualt na nais mong i-update ang paglabas sa branch ng `master` ng repositoryo ng submodule.
Kaya mo, gayunpaman, itakda ito sa ibang bagay kung gusto mo.
Halimbawa, kung gusto mo na subaybayan ng DbConnector na submodule ang ``stable'' na branch ng repostiryong iyon, maaari mong itakda ito sa alinman sa iyong file na `.gitmodules` (upang subaybayan din ng iba), o sa iyong lokal na `.git/config` na file lamang.
Itakda natin ito sa `.gitmodules` na file:

[source,console]
----
$ git config -f .gitmodules submodule.DbConnector.branch stable

$ git submodule update --remote
remote: Pagbibilang ng mga bagay: 4, tapos na.
remote: Pagko-compress ng mga bagay: 100% (2/2), tapos na.
remote: Kabuuan 4 (delta 2), muling nagamit 4 (delta 2)
Pag-aalis ng laman ng mga bagay: 100% (4/4), tapos na.
Mula sa https://github.com/chaconinc/DbConnector
   27cf5d3..c87d55d  stable -> origin/stable
Submodule path 'DbConnector': sinusuri ang 'c87d55d4c6d4b05ee34fbc8cb6f7bf4585ae6687'
----

Kung iiwanan mo ang `-f .gitmodules`, ito ay gagawa lamang ng pagbabago para sa iyo, ngunit malamang na ito ay mas makatutulong upang masubaybayan ang impormasyong iyon sa repositoryo upang ang iba naman ay makagagawa rin.

Kapag patakbuhin natin ang `git status` sa puntong ito, ipapakita ng Git sa atin na mayroon tayong ``bagong mga commit'' sa submodule.

[source,console]
----
$ git status
Sa branch na master
Ang iyong branch ay napapanahon sa 'origin/master'.

Mga pagbabago na hindi nai-stage para sa commit:
  (gumamit ng "git add <file>..." upang i-update kung ano ang iko-commit)
  (gumamit ng "git checkout -- <file>..." upang iwaksi ang mga pagbabago sa tinatrabahuang direktoryo)

  nabago:   .gitmodules
  nabago:   DbConnector (mga bagong commit)

walang pagbabago naidagdag sa commit (gumamit ng "git add" at/o "git commit -a")
----

Kung nagtatakda ka ang setting ng pagsasaayos na `status.submodulesummary`, ipapakita din ng Git sa iyo ang isang maikling buod ng mga pagbabago sa iyong mga submodule:

[source,console]
----
$ git config status.submodulesummary 1

$ git status
Sa branch na master
Ang iyong branch ay napapanahon sa 'origin/master'.

Mga pagbabago na hindi nai-stage para sa commit:
  (gumamit ng "git add <file>..." upang i-update kung ano ang iko-commit)
  (gumamit ng "git checkout -- <file>..." upang iwaksi ang mga pagbabago sa tinatrabahuang direktoryo)

	nabago:   .gitmodules
	nabago:   DbConnector (mga bagong commit)

Mga submodule na nabago ngunit hindi na-update:

* DbConnector c3f01dc...c87d55d (4):
  > hulihin ang di-null na tinatapos na mga linya
----

Sa puntong ito kung patakbuhin mo ang `git diff` maaari nating parehong makita na binago natin ang ating` .gitmodules` na file at na mayroon ding isang bilang ng mga commit na ating na-pull pababa at handa na i-commit sa ating submodule na proyekto.

[source,console]
----
$ git diff
diff --git a/.gitmodules b/.gitmodules
indeks 6fc0b3d..fd1cc29 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +1,4 @@
 [submodule "DbConnector"]
        path = DbConnector
        url = https://github.com/chaconinc/DbConnector
+       branch = stable
 Submodule DbConnector c3f01dc..c87d55d:
  > hulihin ang di-null na tinatapos na mga linya
  > mas matapang na pag-aasikaso ng kamalian
  > mas mahusay na kalakaran ng db
  > mas mahusay na kalakaran ng koneksyon
----

Ito ay medyo astig bilang maaari nating aktwal na makita ang log ng mga commit na ating iko-commit sa ating submodule.
Sa sandaling na-commit, maaari mong makita ang impormasyong ito pagkatapos ng katotohanan pati na rin kapag nagpatakbo ka ng `git log -p`.

[source,console]
----
$ git log -p --submodule
i-commit ang 0a24cfc121a8a3c118e0105ae4ae4c00281cf7ae
May-akda: Scott Chacon <schacon@gmail.com>
Petsa:   Wed Sep 17 16:37:02 2014 +0200

    nag-a-update sa DbConnector para sa pag-aayos ng bug

diff --git a/.gitmodules b/.gitmodules
indeks 6fc0b3d..fd1cc29 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +1,4 @@
 [submodule "DbConnector"]
        path = DbConnector
        url = https://github.com/chaconinc/DbConnector
+       branch = stable
Submodule DbConnector c3f01dc..c87d55d:
  > hulihin ang di-null na tinatapos na mga linya
  > mas matapang na pag-aasikaso ng kamalian
  > mas mahusay na kalakaran ng db
  > mas mahusay na kalakaran ng koneksyon
----

Bilang default, susubukan ng Git na i-update ang *lahat* ng iyong mga submodule kapag nagpatakbo ka ng `git submodule update --remote` kaya kung mayroon kang maraming mga ito, maaari mong gustuhin na ipasa ang pangalan ng submodule lamang na gusto mong subukang i-update.

===== Pagtatrabaho sa isang Submodule

Malamang na kung gumagamit ka ng mga submodule, ginagawa mo ito dahil gusto mo talagang magtrabaho sa code sa submodule sa parehong oras habang nagtatrabaho ka sa code sa pangunahing proyekto (o sa ilang mga submodule).
Kung hindi man ay malamang na ikaw ay gumamit ng isang mas simple na sistema ng pamamahala ng dependensya (tulad ng Maven o Rubygems).

Kaya ngayon ay talakayin natin ang isang halimbawa ng paggawa ng mga pagbabago sa submodule sa parehong oras sa pangunahing proyekto at pag-commit at paglalathala sa mga pagbabago iyon sa parehong oras.

Sa ngayon, kapag pinatakbo natin ang utos na `git submodule update` upang makuha ang mga pagbabago mula sa mga repositoryo ng submodule, makakakuha ang Git ng mga pagbabago at i-update ang mga file sa subdirectory ngunit iiwan ang sub-repository sa tinatawag na `estado na `nakahiwalay na HEAD''.
Ito ay nangangahulugan na walang lokal na tinatrabahuang branch (tulad ng ``master'', halimbawa) na nagsusubaybay ng mga pagbabago.
Ng walang tinatrabahuang branch na nagsusubaybay ng mga pagbabago, iyon ay nangangahulugan na kahit na ikaw ay mag-commit ng mga pagbabago sa submodule, ang mga pagbabagong iyon ay posibleng mawala sa susunod na patakbuhin mo ang `git submodule update`.
Kailangan mong gawin ang ilang mga dagdag na hakbang kung nais mong baguhin ang mga submodule na susubaybayan.

Para ma-set up ang iyong submodule na maging mas madaling pasukin at i-hack, kailangan mong gawin ang dalawang bagay.
Kailangan mong puntahan ang bawat submodule at suriin ang isang branch na tatrabahuin.
Pagkatapos ay kailangan mong sabihan ang Git kung ano ang gagawin kung may ginawa kang mga pagbabago at pagkatapos ay ipu-pull ng `git submodule update --remote` sa bagong trabaho mula sa upstream.
Ang mga pagpipilian ay maaari kang mag-merge ng mg ito sa iyong lokal na trabaho, o subukang i-rebase ang iyong lokal na trabaho sa itaas ng mga bagong pagbabago.

Una sa lahat, puntahan natin ang ating submodule na direktoryo at suriin ang isang branch.

[source,console]
----
$ git checkout stable
Pinalitan sa branch na 'stable'
----

Subukan natin ito sa opsyon na ``merge''.
Upang itakda ito nang mano-mano, maaari lamang nating idagdag ang pagpipilian na `--merge` sa ating `update` na pagtawag.
Dito, makikita natin na may isang pagbabago sa server para sa submodule na ito at ito ay nai-merge.

[source,console]
----
$ git submodule update --remote --merge
remote: Pagbibilang ng mga bagay: 4, tapos na.\
remote: Pagko-compress ng mga bagay: 100% (2/2), tapos na.
remote: Kabuuan 4 (delta 2), muling nagamit 4 (delta 2)
Pag-aalis ng laman ng mga bagay: 100% (4/4), tapos na.
Mula sa https://github.com/chaconinc/DbConnector
   c87d55d..92c7337  stable     -> origin/stable
Nag-a-update sa c87d55d..92c7337
Fast-forward
 src/main.c | 1 +
 1 file na nabago, 1 pagsisingit(+)
Submodule path 'DbConnector': na-merge sa '92c7337b30ef9e0893e758dac2459d07362ab5ea'
----

Kung pupuntahan natin ang DbConnector na direktoryo, mayroon na tayong mga bagong pagbabago na na-merge sa lokal `stable` na branch.
Ngayon, tingnan natin kung ano ang nangyayari kapag gagawa tayo ng sariling lokal na pagbabago sa library at may ibang tao na mag-push ng iba pang pagbabago na upstream sa parehong oras.

[source,console]
----
$ cd DbConnector/
$ vim src/db.c
$ git commit -am 'unicode support'
[stable f906e16] unicode support
 1 file na nabago, 1 pagsisingit(+)
----

Ngayon kung ating ia-update ang ating submodule, makikita natin kung ano ang nangyayari kapag gumawa tayo ng isang lokal na pagbabago at ang upstream din ay may isang pagbabago na kailangan nating isama.

[source,console]
----
$ git submodule update --remote --rebase
Una, nagri-rewind sa head upang ulitin ang iyong trabaho sa itaas nito...
Naglalapat: unicode na suporta
Submodule path 'DbConnector': ni-rebase sa '5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94'
----

Kung nalimutan mo ang `--rebase` o `--merge`, ia-update lamang ng Git ang submodule sa kung anuman ang nasa server at ilagay muli ang iyong proyekto sa isang tinanggal na HEAD na estado.

[source,console]
----
$ git submodule update --remote
Submodule path 'DbConnector': nag-check out sa '5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94'
----

Kung mangyayari ito, huwag mag-alala, maaari kang bumalik sa direktoryo at suriing muli ang iyong branch (kung saan ay naglalaman pa rin ng iyong trabaho) at i-merge o i-rebase nang mano-mano ang `origin/stable` (o kung anuman ang gustong mong remote na branch).

Kung hindi ka pa naka-commit ng iyong mga pagbabago sa iyong submodule at nagpatakbo ka ng isang update ng submodule na magiging sanhi ng mga isyu, kukunin ng Git ang mgs pagbabago ngunit hindi nito sasapawan ang mga hindi na-save na trabaho sa iyong submodule na direktoryo.

[source,console]
----
$ git submodule update --remote
remote: Pagbibilang ng mga bagay: 4, tapos na.
remote: Pagko-compress ng mga bagay: 100% (3/3), tapos na.
remote: Kabuuan 4 (delta 0), muling nagamit 4 (delta 0)
Pag-aalis ng laman ng mga bagay: 100% (4/4), tapos na.
Mula sa https://github.com/chaconinc/DbConnector
   5d60ef9..c75e92a  stable     -> origin/stable
kamalian: Ang lokal na mga pagbabago sa mga sumusunod na mga file ay masasapawan ng checkout:
	scripts/setup.sh
Pakiusap, i-commit ang iyong mga pagbabago o i-stash ang mga ito bago makapagpalit ng mga branch.
Nag-uurong
Hindi ma-checkout ang 'c75e92a2b3855c9e5b66f915308390d9db204aca' sa path ng submodule na 'DbConnector'
----

Kung gumawa ka ng mga pagbabago na sumasalungat sa ilang nabago na upstream, ipapaalam sa iyo ng Git kapag pinatakbo mo ang update.

[source,console]
----
$ git submodule update --remote --merge
Awtomatikong pagsasama sa scripts/setup.sh
SALUNGATAN (nilalaman): Kasalungatan sa pag-merge sa scripts/setup.sh
Nagtala ng preimage para sa 'scripts/setup.sh'
Nabigo ang awtomatikong pag-merge; ayusin ang mga kasalungtan at pagkatapos i-commit ang resulta.
Hindi ma-merge ang 'c75e92a2b3855c9e5b66f915308390d9db204aca' sa path ng submodule na 'DbConnector'
----

Maaari kang magpunta sa submodule na direktoryo at ayusin ang salungatan tulad ng karaniwan mong ginagawa.

[[_publishing_submodules]]
===== Paglalathala sa mga Pagbabago ng Submodule

Ngayon ay mayroon na tayong iilang mga pagbabago sa ating submodule na direktoryo.
Ilan sa mga ito ay dinala mula sa upstream sa pamamagitan ng ating mga update at ang iba ay ginawa sa lokal at hindi pa magagamit ng sinuman dahil hindi pa natin na-push ang mga ito.

[source,console]
----
$ git diff
Submodule DbConnector c87d55d..82d2ad3:
  > Nag-merge mula sa origin/stable
  > ina-update ang setup script
  > unicode na suporta
  > tinanggal ang hindi kinakailangang pamamaraan
  > nagdagdag ng bagong opsyon para sa conn pooling
----

Kung tayo ay nag-commit sa pangunahing proyekto at pi-nush ito, nang wala ring pag-push sa mga pagbabago ng submodule, ang ibang tao na nagsusubok na mag-check out ng mga pagbabago ay magkakaroon ng problema dahil wala silang paraan upang makuha ang mga naka-dependeng pagbabago sa submodule.
Ang mga pagbabagong iyon ay umiiral lamang sa ating lokal na kopya.

Para makasiguro na hindi na ito mangyayari, maaari mong hilingin sa Git na suriin na ang lahat ng iyong mga submodile ay na-push nang maayos bago mag-push sa pangunahing proyekto.
Ang utos `git push` ay tumatanggap ng argumento na `--recurse-submodules` na kung saan maaari itakda ang alinman sa ``check'' o ``on-demand''.
Ang opsyon na ``check'' ay simpleng bibigo sa `push` kung anuman sa mga na-commit na pagbabago ng submodule ay hindi na-push.

[source,console]
----
$ git push --recurse-submodules=check
Ang mga sumusunod na mga path ng submodule ay naglalaman ng mga pagbabago na maaaring
hindi matagpuan sa anumang remote:
  DbConnector

Pakisubukan

	git push --recurse-submodules=on-demand

o mag-cd sa path at gamitin ang

	git push

upang ma-push ang mga ito sa isang remote.
----

Tulad ng iyong nakikita, nagbibigay din ito sa atin ng ilang kapaki-pakinabang na payo tungkol sa kung ano ang maaari nating gawin sa susunod.
Ang simpleng pagpipilian ay pumunta sa bawat submodule at mano-manong i-push sa mga remote upang matiyak na magagamit ang mga ito sa labas at pagkatapos ay subukang muli ang push na ito.
Kung nais mong suriin ang kilos na mangyayari para sa lahat ng push, maaari mong gawing default ang kilos na ito sa pamamagitan ng paggawa ng `git config push.recurseSubmodules check`.

Ang isa pang opsyon ay ang paggamit ng ``on-demand'' na halaga, na susubukan na gawin ito para sa iyo.

[source,console]
----
$ git push --recurse-submodules=on-demand
Pushing submodule 'DbConnector'
Pagbibilang ng mga bagay: 9, tapos na.
Delta compression using up to 8 threads.
Pagko-compress ng mga bagay: 100% (8/8), tapos na.
Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, tapos na.
Total 9 (delta 3), muling nagamit 0 (delta 0)
Sa https://github.com/chaconinc/DbConnector
   c75e92a..82d2ad3  stable -> stable
   Pagbibilang ng mga bagay: 2, tapos na.
Delta compression na gumagamit ng hanggap 8 mga thread.
Pagko-compress ng mga bagay: 100% (2/2), tapos na.
Pagsusulat ng mga bagao: 100% (2/2), 266 bytes | 0 bytes/s, tapos na.
Total 2 (delta 1), muling nagamit 0 (delta 0)
Sa https://github.com/chaconinc/MainProject
   3d6d338..9a377d1  master -> master
----

Tulad ng makikita mo doon, nagpunta si Git sa module ng DbConnector at nag-push ito bago mag-push sa pangunahing proyekto.
Kung ang submodule push ay nabigo para sa ilang kadahilanan, ang pangunahing push ng proyekto ay mabibigo din.
Maaari mong gawing default ang kilos na ito sa pamamagitan ng paggawa ng `git config push.recurseSubmodules on-demand`.

===== Pag-merge sa mga Pagbabago ng Submodule

Kung binago mo ang isang reperensya ng submodule sa parehong oras bilang ibang tao, maaari kang makaranas ng ilang mga problema.
Iyon ay, kung ang mga kasaysayan ng submodule ay magkaiba at na-commit sa mga magkaibang branch sa isang superproject, maaaring tumagal nang kaunti na maayos ito.

Kung ang isa sa mga commit ay isang direktang ninuno ng iba pan (isang mabilis na pagsasama), pagkatapos ay piliin lamang ng Git ang huli para sa pagsasama, upang ito ay gumana.

Ang Git ay hindi magtatangkang kahit isang maliit na pag-merge para sa iyo, gayunpaman.
Kung ang submodule ay gumagawa ng magkaiba at kailangang i-merge, makakakuha ka ng isang bagay na mukhang ganito:

[source,console]
----
$ git pull
remote: Pagbibilang ng mga bagay: 2, tapos na.
remote: Pagko-compress ng mga bagay: 100% (1/1), tapos na.
remote: Kabuuan 2 (delta 1), muling nagamit 2 (delta 1)
Pag-aalis ng laman ng mga bagay: 100% (2/2), tapos na.
Mula sa https://github.com/chaconinc/MainProject
   9a377d1..eb974f8  master     -> origin/master
Nagkukuha sa submodule DbConnector
babala: Bigong na-merge ang submodule DbConnector (ang pag-merge ng sumusunod na mga commit ay hindi natagpuan)
Awtomatikong pag-merge sa DbConnector
SALUNGATAN (submodule): Kasalungatan sa pag-merge sa DbConnector
Nabigo ang awtomatikong pag-merge; ayusin ang mga salungatan at pagkatapos i-commit ang resulta.
----

Sa totoo lang kung ano ang nangyari dito ay napag-alaman ng Git na ang dalawang branch ay nagtatala ng mga puntos sa kasaysayan ng submodule na magkakaiba at kailangang i-merge.
Ipinapaliwanag ito bilang ``hindi natagpuan ang mga sumusunod na mga commit sa pag-merge'', kung saan ay nakakalito ngunit aming ipapaliwanag kung bakit ganyan nang ilang sandali.

Upang malutas ang problema, kailangan mong alamin kung ano ang dapat na estado ng submodule.
Kakaiba, hindi masyadong nagbibigay ang Git sa iyo ng impormasyon na tutulong dito, kahit na ang SHA-1s ng mga commit sa parehong panig ng kasaysayan.
Sa kabutihang-palad, madali itong alamin.
Kung patakbuhin mo ang `git diff` maaari kang makakuha ng SHA-1s ng mga commit na nakatala sa parehong mga branch na sinubukang mong i-merge.

[source,console]
----
$ git diff
diff --cc DbConnector
index eb41d76,c771610..0000000
--- a/DbConnector
+++ b/DbConnector
----

Kaya, sa kasong ito, ang `eb41d76` ay ang commit sa ating submodule na mayroon *tayo* at `c771610` ay ang commit na mayroon ang upstream.
Kung pupunta tayo sa ating submodule na direktoryo, ito ay dapat nasa `eb41d76` dahil hindi ito ginalaw ng merge.
Kung para sa kahit anong dahilan ito ay hindi, maaari mo lamang ilikha at i-checkout ang branch na tumuturo dito.

Ang mahalaga ay ang SHA-1 ng commiut mula sa ibang bahagi.
Ito ang kinakailangan mong i-merge at lutasin.
Maaari mo ring subukan ang pag-merge nang direkta, gamit ang SHA-1, o maaari kang lumikha ng isang branch para rito at pagkatapos ay subukang i-merge iyon.
Iminungkahi namin ang huli, kahit na ang paggawa ng mas magandang commit na mensahe ng merge.

Kaya, pupunta tayo sa ating submodule na direktoryo, lumikha ng isang branch batay sa pangalawang SHA-1 na iyon mula sa `git diff` at mano-manong i-merge.

[source,console]
----
$ cd DbConnector

$ git rev-parse HEAD
eb41d764bccf88be77aced643c13a7fa86714135

$ git branch try-merge c771610
(DbConnector) $ git merge try-merge
Awtomatikong pag-merge sa src/main.c
SALUNGATAN (nilalaman): Salungatan ng pag-merge sa src/main.c
Naitala ang preimage para sa 'src/main.c'
Nabigo ang awtomatikong pag-merge; ayusin ang mga salungatan at pagkatapos ay i-commit ang resulta.
----

Nakakuha tayo dito ng aktwal na salungan sa pag-merge, kaya kung malutas natin iyon at ma-commit ito, maaari tayong mag-update sa pangunahing proyekto gamit ang resulta.

[source,console]
----
$ vim src/main.c <1>
$ git add src/main.c
$ git commit -am 'merged our changes'
Naitala ang resolusyon para sa 'src/main.c'.
[master 9fd905e] nai-merge ang ating mga pagbabago

$ cd .. <2>
$ git diff <3>
diff --cc DbConnector
index eb41d76,c771610..0000000
--- a/DbConnector
+++ b/DbConnector
@@@ -1,1 -1,1 +1,1 @@@
- Subproject commit eb41d764bccf88be77aced643c13a7fa86714135
 -Subproject commit c77161012afbbe1f58b5053316ead08f4b7e6d1d
++Subproject commit 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a
$ git add DbConnector <4>

$ git commit -m "Nag-merge sa mga pagbabago ni Tom" <5>
[master 10d2c60] Nag-merge sa mga pagbabago ni Tom
----

<1> Una, ating nilutas ang salungatan sa pag-merge
<2> Pagkatapos, tayo ay bumalik sa direktoryo ng pangunahing proyekto
<3> Maaari nating suriing muli ang SHA-1s
<4> Lutasin ang mga nagkasalungatang submodule na tala
<5> I-commit ang ating merge


Ito ay maaaring nakakalito, ngunit ito ay hindi ganoon kahirap.

Kapansin-pansin na mayroong ibang kaso na hinahawakan ng Git.
Kung umiiral ang isang commit ng merge sa direktoryo ng submodule na naglalaman ng *parehong* mga commit sa kasaysayan nito, imumungkahi ito ng Git sa iyo bilang isang posibleng solusyon.
Nakikita nito na sa ilang punto sa proyekto ng submodule, may isang naka-merge ng mga branch na naglalaman ng dalawang commit na ito, kaya maaaring gugustuhin mo ang isang iyon.


Ito ang dahilan kung bakit ang mensahe ng kamalian mula noon ay ``pag-merge ng mga sumusunod na commit ay hindi natagpuan'', dahil ito makakagawa *nito*.
Ito ay nakakalito dahil sino ang aasa nito na *subukuan* na gawin ito?

Kung ito ay makakahanap ng isang katanggap-tanggap na commit ng pag-merge, makikita mo ang katulad nito.

[source,console]
----
$ git merge origin/master
babala: Bigong nai-merge ang submodule na DbConnector (hindi pinabilis)
Nakatagpo ng isang posibleng resolusyon sa merge para sa submodule:
 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a: > nai-merge ang ating mga pagbabago
Kung ito ay tama, idagdag lamang ito sa indeks bilang halimbawa 
sa pamamagitan ng paggamit ng:


  git update-index --cacheinfo 160000 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a "DbConnector"

na tatanggap sa mungkahing ito.
Awtomatikong pag-merge sa DbConnector
SALUNGATAN (submodule): Salungatan ng pag-merge sa DbConnector
Nabigo ang awtomatikong pag-merge; ayusin ang mga salungatan at pagkatapos ay i-commit ang resulta.

----

Ang imininungkahi nito na gawin mo ay i-update ang indeks katulad ng pinatakbo mo ang `git add`, na naglilinis sa salungatan, pagkatapos i-commit.Gayunpaman, hindi mo dapat gawin ito. Maaari kang pumunta sa direktoryo ng submodule, tingnan kung ano ang pagkakaiba, pabilisan sa commit na ito, suriin ito nang maayos, at pagtapos i-commit ito.

[source,console]
----
$ cd DbConnector/
$ git merge 9fd905e
Nag-a-update sa  eb41d76..9fd905e
Pinabilis

$ cd ..
$ git add DbConnector
$ git commit -am 'Pinabilis sa isang karaniwang submodule child'
----

Ito ay nagsasakatuparan ng parehong bagay, ngunit hindi bababa sa ganitong paraan na maaari mong patunayan na gumagana ito at mayroon kang code sa iyong direktoryo ng submodule kapag tapos ka na.

==== Mga Tip ng Submodule

May ilang mga bagay na maaaring mong gawin upang gawing mas madali ang pagtatrabaho sa mga aubmodule.

===== Submodule Foreach

May utos ng submodule na `foreach` upang magpatakbo ng ilang arbitraryong utos sa bawat submodule.
Ito ay talagang makakatulong kung mayroon kang iilang mga submodule sa parehong proyekto.

Halimbawa, sabihin natin na nais nating magsimula ng isang bagong tampok o gumawa ng isang bugfix at mayroon tayong ginagawang trabaho sa iilang mga submodule.
Madali nating mai-stash ang lahat ng trabaho sa lahat ng ating mga submodule.


[source,console]
----
$ git submodule foreach 'git stash'
Pumapasok sa 'CryptoLibrary'
Walang lokal na pagbabago ang isi-save
Pumapasok sa 'DbConnector'
Naka-save na gumaganang direktoryo at estado ng imdeks na WIP na pirmi: 82d2ad3 Na-merge mula sa origin/stable
Ang HEAD ngayon ay nasa 82d2ad3 Merge mula sa origin/stable
----

Pagkatapos ay maaari tayong lumikha ng isang bagong branch at gamitin ito sa lahat ng ating mga submodule.

[source,console]
----
$ git submodule foreach 'git checkout -b featureA'
Pumapasok sa 'CryptoLibrary'
Pinalitan sa isang bagong branch na 'featureA'
Pumapasok sa 'DbConnector'
Pinalitan sa isang bagong branch na 'featureA'
----

Nakuha mo ang ideya.
Isang bagay na talagang makakatulong na maaari mong gawin ay ang paglikha ng isang magandang pinagsamang diff ng kung ano ang binago sa iyong pangunahing proyekto at pati na rin sa lahat ng iyong mga subproject.


[source,console]
----
$ git diff; git submodule foreach 'git diff'
Submodule DbConnector ay naglalaman ng binagong nilalaman
diff --git a/src/main.c b/src/main.c
index 210f1ae..1f0acdc 100644
--- a/src/main.c
+++ b/src/main.c
@@ -245,6 +245,8 @@ static int handle_alias(int *argcp, const char ***argv)

      commit_pager_choice();

+     url = url_decode(url_orig);
+
      /* build alias_argv */
      alias_argv = xmalloc(sizeof(*alias_argv) * (argc + 1));
      alias_argv[0] = alias_string + 1;
Pumapasok sa 'DbConnector'
diff --git a/src/db.c b/src/db.c
index 1aaefb6..5297645 100644
--- a/src/db.c
+++ b/src/db.c
@@ -93,6 +93,11 @@ char *url_decode_mem(const char *url, int len)
        return url_decode_internal(&url, len, NULL, &out, 0);
 }

+char *url_decode(const char *url)
+{
+       return url_decode_mem(url, strlen(url));
+}
+
 char *url_decode_parameter_name(const char **query)
 {
        struct strbuf out = STRBUF_INIT;
----

Makikita natin dito na tayo ay nagtutukoy ng isang paggawa sa isang submodule at tumatawag ito sa pangunahing proyekto.
Ito ay halatang isang pinasimpleng halimbawa, ngunit sana ay nagbibigay ito sa iyo ng ideya kung paano ito maaaring kapaki-pakinabang.


===== Kapaki-pakinabang na mga Alyas

Maaaring naisin mo na itakda ang ilang mga alyas para sa ilang mga utos na ito dahil ang mga ito ay mahahaba ng kaunti at hindi mo maaaring itakda ang mga pagpipilian sa pagsasaayos para sa halos lahat ng ito upang gawin silang mga default.
Natalakay natin ang pag-set up ng mga alyas sa <<_git_basics_chapter#_git_aliases>>, ngunit heto ang isang halimbawa sa kung ano ang maaaring naisin mong i-set up kung ikaw ay nagpaplano sa paggawa ng mga submodule sa Git nang maramng beses.


[source,console]
----
$ git config alias.sdiff '!'"git diff && git submodule foreach 'git diff'"
$ git config alias.spush 'push --recurse-submodules=on-demand'
$ git config alias.supdate 'submodule update --remote --merge'
----

Sa paraang ito, maaari mo lang patakbuhin ang `git supdate` kapag nais mong i-update ang iyong mga submodule, o `git spush` upang i-push na may pagausuri sa submodule dependency.

==== Mga Isyu sa mga Submodule

Gayunpaman, ang paggamit ng submodule ay walang hiccups.

Halimbawa, ang pagpapalit ng mga branch na may mga submodule sa loob nito ay maaari ring mapanlinlang.
Kung ikaw ay lumikha ng isang bagong branch, idagdag ang isang submodule doon, at pagkatapos ay bumalik sa isang branch nang wala ang submodule na iyon, mayroon ka pang direktoryo ng submodule bilang hindi sinubaybayang direktoryo:


[source,console]
----
$ git checkout -b add-crypto
Pinalitan sa isang bagong branch na 'add-crypto'

$ git submodule add https://github.com/chaconinc/CryptoLibrary
Nagkokopya sa 'CryptoLibrary'...
...

$ git commit -am 'nagdaragdag sa  crypto library'
[add-crypto 4445836] adding crypto library
 2 mga file ang nabago, 4 pagsisingit(+)
 nalikha ang mode 160000 CryptoLibrary

$ git checkout master
babala: hindi maka-rmdir sa CryptoLibrary: May laman ang direktoryo
Pinalitan sa branch na 'master'
Ang iyong branch ay napanahon sa 'origin/master'.


$ git status
Sa branch na master
Ang iyong branch ay napapanahon sa 'origin/master'.

Mga hindi sinubaybayang file:
  (gumamit ng "git add ..." upang isama kung ano ang mako-commit)

	CryptoLibrary/

walang naidagdag sa commit ngunit may hindi sinubaybayang mga file (gumamit ng "git add" upang masubaybayan)
----


Ang pagtatanggal sa direktoryo ay hindi mahirap, ngunit ito ay maaaring nakakalito na gawin ito doon.
Kung nagawa mong tanggalin ito at bumalik sa branch na may submodule na iyon, kinakailangan mong patakbuhin ang `submodule update --init` upang muli itong punan.

[source,console]
----
$ git clean -ffdx
Nagtatanggal CryptoLibrary/

$ git checkout add-crypto
Pinalitan sa branch na 'add-crypto'

$ ls CryptoLibrary/

$ git submodule update --init
Submodule path 'CryptoLibrary': checked out 'b8dda6aa182ea4464f3f3264b11e0268545172af'

$ ls CryptoLibrary/
Makefile	includes	scripts		src
----

Muli, hindi talaga napakahirap, ngunit ito ay maaaring nakakalito.

Ang ibang pangunahing caveat na pinapatakbo ng karamihan ay kinabibilangan ng pagpapalit mula sa mga subdirectory sa mga submodule.
Kung sinusubaybayan mo ang mga file sa iyong proyekto at nais mong ilipat ang mga ito sa isang submodule, kailangan mong mag-ingat o papagalitan ka ng Git.
Ipagpalagay na mayroon kang mga file sa isang subdirectory ng iyong proyekto, at nais mong ilipat ito sa isang submodule.
Kung tatanggalin mo ang subdirectory at pagkatapos ay patakbuhin ang `submodule add`, sisigawan ka ng Git:

[source,console]
----
$ rm -Rf CryptoLibrary/
$ git submodule add https://github.com/chaconinc/CryptoLibrary
'CryptoLibrary' ay umiiral na sa index
----

Kailangan mo munang hindi i-stage ang direktoryo na `CryptoLibrary` directory.
Pagkatapos ay maaari mo ng idagdag ang submodule:

[source,console]
----
$ git rm -r CryptoLibrary
$ git submodule add https://github.com/chaconinc/CryptoLibrary
Nagkokopya sa 'CryptoLibrary'...
remote: Pagbibilang ng mga bagay: 11, tapos na.
remote: Pagko-compress ng mga bagay: 100% (10/10), done.
remote: Kabuuan 11 (delta 0), muling nagamit 11 (delta 0)
Pag-aalis ng laman ng mga bagay: 100% (11/11), tapos na.
Pagsusuri ng pagkakakonekta... tapos na.
----

Ngayon ipagpalagay na ginawa mo iyon sa isang branch.
Kung susubukan mong bumalik sa isang branch kung saan ang mga file ay nasa aktwal na tree sa halip na isang submodule - nakukuha mo ang error na ito:

[source,console]
----
$ git checkout master
kamalian: Ang mga sumusunod na hindi sinubaybayan na gumaganang tree na mga file ay masasapawan ng checkout:
  CryptoLibrary/Makefile
  CryptoLibrary/includes/crypto.h
  ...
Mangyaring ilipat o tanggalin ang mga ito bago mo mapalitan sa mga branch.
Naghihinto
----

Maaari mong palitan ito gamit ang `checkout -f`, ngunit mag-ingat na wala kang hindi naka-save ng mga pagbabago doon dahil ang mga iyon ay masasapawan ng utos na ito.

[source,console]
----
$ git checkout -f master
babala: hindi maka-rmdir CryptoLibrary: May laman ang direktoryo
Pinalitan sa branch na 'master'
----

Pagkatapos, kapag bumalik ka, makakakuha ka ng isang walang laman na direktoryo na `CryptoLibrary` para sa ilang kadahilanan at hindi na maaaring maayos ito.
Kinakailangan mong pumunta sa iyong direktoryo ng submodule at patakbuhin ang `git checkout .` upang makuha ang lahat ng iyong mga file pabalik.
Maaari mong patakbuhin ang script na `submodule foreach` upang patakbuhin ito para sa marimihang submodule.

Mahalagang alalahanin na ang mga submodule sa ngayon ay nagpapanatili sa lahat ng datos ng Git sa direktoryo ng pinakamataas na proyekto na `.git`, kaya hindi katulad ng mas lumang mga bersyon ng Git, hindi mawawalan ng anumang commit o mga branch ang pagsisira sa direktoryo ng submodule.

Gamit ang mga kagamitang ito, ang mga submodule ay maaaring maging isang simple at epektibong pamamaraan para sa pagbuo sa ilang kaugnay ngunit maghihiwalay na proyekto nang sabay-sabay.
